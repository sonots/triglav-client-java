/**
 * Triglav API
 * Triglav API Reference
 *
 * OpenAPI spec version: 1.0.0
 * Contact: triglav_admin_my@dena.jp
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.triglav.client.api;

import io.triglav.client.ApiCallback;
import io.triglav.client.ApiClient;
import io.triglav.client.ApiException;
import io.triglav.client.ApiResponse;
import io.triglav.client.Configuration;
import io.triglav.client.Pair;
import io.triglav.client.ProgressRequestBody;
import io.triglav.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.triglav.client.MessageEach;
import io.triglav.client.ErrorModel;
import io.triglav.client.Message;
import io.triglav.client.MessageInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessageApi {
    private ApiClient apiClient;

    public MessageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessageApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for fetchMessages */
    private com.squareup.okhttp.Call fetchMessagesCall(String resourceUri, Integer offset, String datetime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'resourceUri' is set
        if (resourceUri == null) {
            throw new ApiException("Missing the required parameter 'resourceUri' when calling fetchMessages(Async)");
        }
        
        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling fetchMessages(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/messages".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (resourceUri != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resource_uri", resourceUri));
        if (datetime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "datetime", datetime));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Fetches messages
     * @param resourceUri URI of Resource (required)
     * @param offset Offset ID for Messages to fetch from (required)
     * @param datetime Datetime formatted by ISO 8601 (optional)
     * @return List&lt;MessageEach&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MessageEach> fetchMessages(String resourceUri, Integer offset, String datetime) throws ApiException {
        ApiResponse<List<MessageEach>> resp = fetchMessagesWithHttpInfo(resourceUri, offset, datetime);
        return resp.getData();
    }

    /**
     * 
     * Fetches messages
     * @param resourceUri URI of Resource (required)
     * @param offset Offset ID for Messages to fetch from (required)
     * @param datetime Datetime formatted by ISO 8601 (optional)
     * @return ApiResponse&lt;List&lt;MessageEach&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MessageEach>> fetchMessagesWithHttpInfo(String resourceUri, Integer offset, String datetime) throws ApiException {
        com.squareup.okhttp.Call call = fetchMessagesCall(resourceUri, offset, datetime, null, null);
        Type localVarReturnType = new TypeToken<List<MessageEach>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetches messages
     * @param resourceUri URI of Resource (required)
     * @param offset Offset ID for Messages to fetch from (required)
     * @param datetime Datetime formatted by ISO 8601 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchMessagesAsync(String resourceUri, Integer offset, String datetime, final ApiCallback<List<MessageEach>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchMessagesCall(resourceUri, offset, datetime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MessageEach>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for sendMessage */
    private com.squareup.okhttp.Call sendMessageCall(String resourceUri, String datetime, MessageInput message, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = message;
        
        // verify the required parameter 'resourceUri' is set
        if (resourceUri == null) {
            throw new ApiException("Missing the required parameter 'resourceUri' when calling sendMessage(Async)");
        }
        
        // verify the required parameter 'datetime' is set
        if (datetime == null) {
            throw new ApiException("Missing the required parameter 'datetime' when calling sendMessage(Async)");
        }
        
        // verify the required parameter 'message' is set
        if (message == null) {
            throw new ApiException("Missing the required parameter 'message' when calling sendMessage(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/messages".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (resourceUri != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "resource_uri", resourceUri));
        if (datetime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "datetime", datetime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Enqueues a new message
     * @param resourceUri URI of Resource (required)
     * @param datetime Datetime formatted by ISO 8601 (required)
     * @param message Message to add (required)
     * @return Message
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Message sendMessage(String resourceUri, String datetime, MessageInput message) throws ApiException {
        ApiResponse<Message> resp = sendMessageWithHttpInfo(resourceUri, datetime, message);
        return resp.getData();
    }

    /**
     * 
     * Enqueues a new message
     * @param resourceUri URI of Resource (required)
     * @param datetime Datetime formatted by ISO 8601 (required)
     * @param message Message to add (required)
     * @return ApiResponse&lt;Message&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Message> sendMessageWithHttpInfo(String resourceUri, String datetime, MessageInput message) throws ApiException {
        com.squareup.okhttp.Call call = sendMessageCall(resourceUri, datetime, message, null, null);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Enqueues a new message
     * @param resourceUri URI of Resource (required)
     * @param datetime Datetime formatted by ISO 8601 (required)
     * @param message Message to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendMessageAsync(String resourceUri, String datetime, MessageInput message, final ApiCallback<Message> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendMessageCall(resourceUri, datetime, message, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
