/**
 * Triglav
 * Triglav API Reference.
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.triglav.client.api;

import io.triglav.client.ApiCallback;
import io.triglav.client.ApiClient;
import io.triglav.client.ApiException;
import io.triglav.client.ApiResponse;
import io.triglav.client.Configuration;
import io.triglav.client.Pair;
import io.triglav.client.ProgressRequestBody;
import io.triglav.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.triglav.client.Resource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResourcesApi {
    private ApiClient apiClient;

    public ResourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResourcesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for apiV1ResourcesCreate */
    private com.squareup.okhttp.Call apiV1ResourcesCreateCall(String uri, String description, Integer clusterId, Boolean consumable, Boolean notifiable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling apiV1ResourcesCreate(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/v1/resources.json".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (uri != null)
        localVarFormParams.put("uri", uri);
        if (description != null)
        localVarFormParams.put("description", description);
        if (clusterId != null)
        localVarFormParams.put("cluster_id", clusterId);
        if (consumable != null)
        localVarFormParams.put("consumable", consumable);
        if (notifiable != null)
        localVarFormParams.put("notifiable", notifiable);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Creates a Resource
     * 
     * @param uri Resource URI (required)
     * @param description Description (optional)
     * @param clusterId Cluster Id (optional)
     * @param consumable Consumable or not (optional)
     * @param notifiable Notifiable or not (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiV1ResourcesCreate(String uri, String description, Integer clusterId, Boolean consumable, Boolean notifiable) throws ApiException {
        apiV1ResourcesCreateWithHttpInfo(uri, description, clusterId, consumable, notifiable);
    }

    /**
     * Creates a Resource
     * 
     * @param uri Resource URI (required)
     * @param description Description (optional)
     * @param clusterId Cluster Id (optional)
     * @param consumable Consumable or not (optional)
     * @param notifiable Notifiable or not (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiV1ResourcesCreateWithHttpInfo(String uri, String description, Integer clusterId, Boolean consumable, Boolean notifiable) throws ApiException {
        com.squareup.okhttp.Call call = apiV1ResourcesCreateCall(uri, description, clusterId, consumable, notifiable, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates a Resource (asynchronously)
     * 
     * @param uri Resource URI (required)
     * @param description Description (optional)
     * @param clusterId Cluster Id (optional)
     * @param consumable Consumable or not (optional)
     * @param notifiable Notifiable or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1ResourcesCreateAsync(String uri, String description, Integer clusterId, Boolean consumable, Boolean notifiable, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1ResourcesCreateCall(uri, description, clusterId, consumable, notifiable, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for apiV1ResourcesDestroy */
    private com.squareup.okhttp.Call apiV1ResourcesDestroyCall(String idOrUri, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'idOrUri' is set
        if (idOrUri == null) {
            throw new ApiException("Missing the required parameter 'idOrUri' when calling apiV1ResourcesDestroy(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/v1/resources/{id_or_uri}.json".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id_or_uri" + "\\}", apiClient.escapeString(idOrUri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Deletes an existing Resource
     * 
     * @param idOrUri Resource Id or URI (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiV1ResourcesDestroy(String idOrUri) throws ApiException {
        apiV1ResourcesDestroyWithHttpInfo(idOrUri);
    }

    /**
     * Deletes an existing Resource
     * 
     * @param idOrUri Resource Id or URI (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiV1ResourcesDestroyWithHttpInfo(String idOrUri) throws ApiException {
        com.squareup.okhttp.Call call = apiV1ResourcesDestroyCall(idOrUri, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes an existing Resource (asynchronously)
     * 
     * @param idOrUri Resource Id or URI (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1ResourcesDestroyAsync(String idOrUri, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1ResourcesDestroyCall(idOrUri, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for apiV1ResourcesIndex */
    private com.squareup.okhttp.Call apiV1ResourcesIndexCall(String clusterId, Boolean consumable, Boolean notifiable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'clusterId' is set
        if (clusterId == null) {
            throw new ApiException("Missing the required parameter 'clusterId' when calling apiV1ResourcesIndex(Async)");
        }
        
        // verify the required parameter 'consumable' is set
        if (consumable == null) {
            throw new ApiException("Missing the required parameter 'consumable' when calling apiV1ResourcesIndex(Async)");
        }
        
        // verify the required parameter 'notifiable' is set
        if (notifiable == null) {
            throw new ApiException("Missing the required parameter 'notifiable' when calling apiV1ResourcesIndex(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/v1/resources.json".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (clusterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "cluster_id", clusterId));
        if (consumable != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "consumable", consumable));
        if (notifiable != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "notifiable", notifiable));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Fetches resources
     * Query and fetch resources
     * @param clusterId Cluster Id (required)
     * @param consumable Consumable or not (required)
     * @param notifiable Notifiable or not (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiV1ResourcesIndex(String clusterId, Boolean consumable, Boolean notifiable) throws ApiException {
        apiV1ResourcesIndexWithHttpInfo(clusterId, consumable, notifiable);
    }

    /**
     * Fetches resources
     * Query and fetch resources
     * @param clusterId Cluster Id (required)
     * @param consumable Consumable or not (required)
     * @param notifiable Notifiable or not (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiV1ResourcesIndexWithHttpInfo(String clusterId, Boolean consumable, Boolean notifiable) throws ApiException {
        com.squareup.okhttp.Call call = apiV1ResourcesIndexCall(clusterId, consumable, notifiable, null, null);
        return apiClient.execute(call);
    }

    /**
     * Fetches resources (asynchronously)
     * Query and fetch resources
     * @param clusterId Cluster Id (required)
     * @param consumable Consumable or not (required)
     * @param notifiable Notifiable or not (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1ResourcesIndexAsync(String clusterId, Boolean consumable, Boolean notifiable, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1ResourcesIndexCall(clusterId, consumable, notifiable, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for apiV1ResourcesShow */
    private com.squareup.okhttp.Call apiV1ResourcesShowCall(String idOrUri, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'idOrUri' is set
        if (idOrUri == null) {
            throw new ApiException("Missing the required parameter 'idOrUri' when calling apiV1ResourcesShow(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/v1/resources/{id_or_uri}.json".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id_or_uri" + "\\}", apiClient.escapeString(idOrUri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Fetches a single Resource
     * 
     * @param idOrUri Resource Id or URI (required)
     * @return Resource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Resource apiV1ResourcesShow(String idOrUri) throws ApiException {
        ApiResponse<Resource> resp = apiV1ResourcesShowWithHttpInfo(idOrUri);
        return resp.getData();
    }

    /**
     * Fetches a single Resource
     * 
     * @param idOrUri Resource Id or URI (required)
     * @return ApiResponse&lt;Resource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Resource> apiV1ResourcesShowWithHttpInfo(String idOrUri) throws ApiException {
        com.squareup.okhttp.Call call = apiV1ResourcesShowCall(idOrUri, null, null);
        Type localVarReturnType = new TypeToken<Resource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetches a single Resource (asynchronously)
     * 
     * @param idOrUri Resource Id or URI (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1ResourcesShowAsync(String idOrUri, final ApiCallback<Resource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1ResourcesShowCall(idOrUri, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Resource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for apiV1ResourcesUpdate */
    private com.squareup.okhttp.Call apiV1ResourcesUpdateCall(String idOrUri, String uri, String description, Integer clusterId, Boolean consumable, Boolean notifiable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'idOrUri' is set
        if (idOrUri == null) {
            throw new ApiException("Missing the required parameter 'idOrUri' when calling apiV1ResourcesUpdate(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling apiV1ResourcesUpdate(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/v1/resources/{id_or_uri}.json".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "id_or_uri" + "\\}", apiClient.escapeString(idOrUri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (uri != null)
        localVarFormParams.put("uri", uri);
        if (description != null)
        localVarFormParams.put("description", description);
        if (clusterId != null)
        localVarFormParams.put("cluster_id", clusterId);
        if (consumable != null)
        localVarFormParams.put("consumable", consumable);
        if (notifiable != null)
        localVarFormParams.put("notifiable", notifiable);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Updates a Resource
     * 
     * @param idOrUri Resource Id or URI (required)
     * @param uri Resource URI (required)
     * @param description Description (optional)
     * @param clusterId Cluster Id (optional)
     * @param consumable Consumable or not (optional)
     * @param notifiable Notifiable or not (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void apiV1ResourcesUpdate(String idOrUri, String uri, String description, Integer clusterId, Boolean consumable, Boolean notifiable) throws ApiException {
        apiV1ResourcesUpdateWithHttpInfo(idOrUri, uri, description, clusterId, consumable, notifiable);
    }

    /**
     * Updates a Resource
     * 
     * @param idOrUri Resource Id or URI (required)
     * @param uri Resource URI (required)
     * @param description Description (optional)
     * @param clusterId Cluster Id (optional)
     * @param consumable Consumable or not (optional)
     * @param notifiable Notifiable or not (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> apiV1ResourcesUpdateWithHttpInfo(String idOrUri, String uri, String description, Integer clusterId, Boolean consumable, Boolean notifiable) throws ApiException {
        com.squareup.okhttp.Call call = apiV1ResourcesUpdateCall(idOrUri, uri, description, clusterId, consumable, notifiable, null, null);
        return apiClient.execute(call);
    }

    /**
     * Updates a Resource (asynchronously)
     * 
     * @param idOrUri Resource Id or URI (required)
     * @param uri Resource URI (required)
     * @param description Description (optional)
     * @param clusterId Cluster Id (optional)
     * @param consumable Consumable or not (optional)
     * @param notifiable Notifiable or not (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV1ResourcesUpdateAsync(String idOrUri, String uri, String description, Integer clusterId, Boolean consumable, Boolean notifiable, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV1ResourcesUpdateCall(idOrUri, uri, description, clusterId, consumable, notifiable, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
